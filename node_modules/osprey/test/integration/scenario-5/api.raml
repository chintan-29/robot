#%RAML 0.8
---
title: scenario-5
version: 1.0
baseUri: http://localhost:8002/api
/all:
  get:
    queryParameters:
      param:
        type: string
        required: true
    responses:
      200:
        body:
          application/json:
  post:
    body:
      application/x-www-form-urlencoded:
        formParameters:
          param:
            type: string
            required: true
            minLength: 3
            maxLength: 3
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "properties": {
              "id": {
                "description": "Identifier",
                "maxLength": 3,
                "minLength": 3,
                "type": "string"
              }
            },
            "type": "object",
            "name": "resource"
          }
      application/xml:
        schema: |
          <?xml version="1.0" encoding="ISO-8859-1" ?>
          <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
            <xs:element name="league">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="name" type="xs:string"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:schema>
    responses:
      201:
        body:
          application/json:
  head:
    responses:
      204:
  /{id}:
    uriParameters:
      id:
        type: number
        minimum: 10
        maximum: 10
    get:
      responses:
        200:
          body:
            application/json:
    put:
      headers:
        header:
          type: string
          enum: [a, b]
          required: true
      body:
        application/json:
      responses:
        204:
    patch:
      body:
        application/json:
      responses:
        204:
    delete:
      responses:
        204:
/mocks:
  get:
    queryParameters:
      param:
        type: string
        required: true
    responses:
      200:
        headers:
          header:
            default: GET
        body:
          application/json:
            example: |
              [{
                "id": "1",
                "description": "description"
              },
              {
                "id": "2",
                "description": "description"
              }]
      500:
  post:
    body:
      application/x-www-form-urlencoded:
        formParameters:
          param:
            type: string
            required: true
            minLength: 3
            maxLength: 3
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "properties": {
              "id": {
                "description": "Identifier",
                "maxLength": 3,
                "minLength": 3,
                "type": "string"
              }
            },
            "type": "object",
            "name": "resource"
          }
      application/xml:
        schema: |
          <?xml version="1.0" encoding="ISO-8859-1" ?>
          <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
            <xs:element name="league">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="name" type="xs:string"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:schema>
    responses:
      201:
        headers:
          header:
            default: POST
        body:
          application/json:
            example: |
              {
                "description": "description"
              }
      500:
  put:
    headers:
      header:
        type: string
        enum: [a, b]
        required: true
    body:
      application/json:
    responses:
      204:
        headers:
          header:
            default: PUT
      500:
  head:
    responses:
      204:
        headers:
          header:
            default: HEAD
          header2:
      500:
  patch:
    body:
      application/json:
    responses:
      204:
        headers:
          header:
            default: PATCH
      500:
  /{id}:
    uriParameters:
      id:
        type: number
        minimum: 10
        maximum: 10
    get:
      responses:
        200:
          headers:
            header:
              default: GET
          body:
            application/json:
              example: |
                {
                  "id": "1",
                  "description": "description"
                }
        500:
    delete:
      responses:
        204:
          headers:
            header:
              default: DELETE
    head:
      responses:
        204:
          headers:
            header:
              default: HEAD
        500:
/empty-mock:
  get:
    responses:
      200:
        headers:
          header:
            default: GET
